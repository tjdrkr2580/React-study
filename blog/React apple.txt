#1
강의를 시작하기 전 Node.js를 설치 한 이유 :npm이라는 툴 이용 가능 (npm create-react-app 설치)
App.js는 메인페이지에 들어갈 HTML 짜는 곳임.

node_modules 라이브러리 모은 폴더
public 정적 파일 보관함 사진 등등
src 소스코드 보관함
package.json 설치한 라이브러리 목록

#2
jsx에서는 class -> className 을 사용함. [Javascript 입력란이기에]
React 데이터 바인딩 쉽게 하는 법 - 데이터 바인딩 : 데이터를 HTML에 꽂아넣는 것
{ 변수명 , 함수등 } - srd , id ,href 등에 특성에서도 {} 사용 가능
JSX에서 style 속성 집어넣을 때 style={ object 자료형으로 만든 스타일 } 
자바스크립트에서는 -가 마이너스이기 때문에 Camelcase를 사용함 ex ) fontSize
style도 마찬가지로 변수로 세팅해준다음 {}을 이용하여 넣을 수 있다
let fontCss = {color : blue , fontSize : 30px}

#3
*state : 변수 대신 쓰는 데이터 저장공간 - usestate()를 통해서 만들어야함. [문자 , 숫자 , array , object 다 가능]
{ useState } 상단에 첨부 - 리액트 데이터 저장공간 state 만들기 
usestate(`뭐시기`); < [a,b] 2칸에 array 생성 a에는 `뭐`,  b에는 이 데이터를 수정하기 위한 함수가 들어감
* ES6 destructuring 문법 - let [a,b] = [10,20] < 배열이나 오브젝트 안에 있는 자료를 안에 쉽게 담고 싶을 때.
state를 사용하는 이유 : 1. 웹이 앱처럼 동작하게 만들고 싶어서 , 
2. 제목을 수정하거나 정렬했을 때 , 새로고침 없이도 바로 HTML이 자동으로 재렌더링 됨
자주 바뀌는 중요한 데이터의 경우 변수말고 꼭 state로 저장해서 쓰기.

#4
onClick = { 클릭될 때 실행할 함수 }
onClick = { () => {실행할 내용 } }
state 변경 방법이 따로 있음. 변경 함수에 문자열이나 숫자를 넣으면 됌.

#5
state를 깡으로 수정할 수는 없음 . 변수 하나를 통해서 deep copy한 다음에 값을 바꾸거나 해야함.

	                 


